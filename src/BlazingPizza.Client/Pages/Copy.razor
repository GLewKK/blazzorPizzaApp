@page "/takePizza"

@using BlazzingPizza.Client
@using BlazingPizza.Shared.CoreItems
@using System.Diagnostics
@inject StateOfOrder StateOfOrder


    <div class="main">
        <h2>Welcome to pizza Creator</h2>
        @if (StateOfOrder.IsTakenDough.HasValue)
        {
            @if (StateOfOrder.IsTakenDough.Value)
            {
                <h1>You selected: @StateOfOrder.SelectedDough</h1>
            }
            else
            {
                <TemplatedDialog Show="@StateOfOrder.IsTakenDough.Value.Equals(false)">
                    <SelectDoughDialog factoryList="@StateOfOrder.DoughtFactories"
                                       OnConfirm="@SelectDough"
                                       OnCancel="@CancelDoughSelecting">
                    </SelectDoughDialog>
                </TemplatedDialog>

            }
        }
        else
        {
            <button onclick="@GetStarted">Get Started</button>
        }


        @if (StateOfOrder.IsSelectedCheese.HasValue)
        {
            @if (StateOfOrder.IsSelectedCheese.Value)
            {
                <h1>You selected: @StateOfOrder.SelectedCheese</h1>
            }
            else
            {
                <TemplatedDialog Show="@StateOfOrder.IsSelectedCheese.Value.Equals(false)">
                    <SelectCheeseDialog factoryList="@StateOfOrder.CheeseFactories"
                                        OnConfirm="@SelectCheese"
                                        OnCancel="@CancelCheeseSelecting">
                    </SelectCheeseDialog>
                </TemplatedDialog>
            }
        }

        @if (StateOfOrder.IsSelectedSausage.HasValue)
        {
            @if (StateOfOrder.IsSelectedSausage.Value)
            {
                <h1>Done!</h1>

            }
            else
            {
                <TemplatedDialog Show="@StateOfOrder.IsSelectedSausage.Value.Equals(false)">
                    <SelectSausageDialog factoryList="@StateOfOrder.SausageFactories"
                                        decorators="@StateOfOrder.SausageDecorators"
                                        OnApplyDecorator="@ApplyDecorator"
                                         OnSelectSausage="@SelectSausage"
                                        OnConfirm="@FinishSausage"
                                        OnCancel="@CancelCheeseSelecting">
                    </SelectSausageDialog>
                </TemplatedDialog>

                @*foreach (var decorator in StateOfOrder.SausageDecorators)
                {
                    <button onclick="@(() => StateOfOrder.ApplySausage(decorator))">@(decorator is AddSausage ? "+" : "-")</button>
                }
                <h3>Please Select Sausage </h3>
                foreach (var sausageFactory in StateOfOrder.SausageFactories)
                {
                    var sausage = sausageFactory.GetSausage();

                    <button onclick="@(() => StateOfOrder.SelectSausage(sausage))">@sausage.Name</button>
                }

                <button onclick="@(() => StateOfOrder.FinishSausageSelection())">Apply</button>*@
            }
        }

        @if (StateOfOrder.IsPizzaReady.HasValue)
        {
            @if (StateOfOrder.IsPizzaReady.Value)
            {
                <h3>Your Pizza look like:</h3>
                <p>@StateOfOrder.Pizza.CheeseType.Name</p>
                <p>@StateOfOrder.Pizza.CheeseType.Description</p>
                <p>@StateOfOrder.Pizza.DoughType.Name</p>
                <p>@StateOfOrder.Pizza.DoughType.Description</p>

                @foreach (var item in StateOfOrder.Pizza.SausageTypeList.Sausages)
                {
                    <p>@item.Name</p>
                    <p>@item.Description</p>
                }
            }
            else
            {
                <h3>Your Pizza is Ready</h3>
                <button onclick="@StateOfOrder.GetPizza">Get the Pizza</button>
            }
        }
    </div>

@functions{

    protected override void OnInit()
    {
        StateOfOrder.Builder.CreateNewPizza();
    }

    void SelectDough(BaseEntity entity)
    {
        Debug.WriteLine("Entity Description");
        Debug.WriteLine(entity.Description);
        StateOfOrder.SelectDough(entity);
    }

    void SelectCheese(BaseEntity cheese)
    {
        if(cheese is MozzarellaCheese)
        {
            var result = new MozzarellaCheese(cheese.Name, cheese.Description, cheese.Price, cheese.ImgSrc);


            StateOfOrder.SelectCheese(result);


        }
        if(cheese is CheddarChesse)
        {
            var result = new CheddarChesse(cheese.Name, cheese.Description, cheese.Price, cheese.ImgSrc);


            StateOfOrder.SelectCheese(result);
        }
    }
    void ApplyDecorator(SausageDecorator decorator)
    {
        StateOfOrder.ApplySausage(decorator);
    }
    void SelectSausage(Sausage sausage)
    {
        StateOfOrder.SelectSausage(sausage);
    }
    void FinishSausage()
    {
        StateOfOrder.FinishSausageSelection();
    }
    void GetStarted()
    {
        StateOfOrder.IsTakenDough = false;
    }
    void CancelDoughSelecting()
    {
        StateOfOrder.IsTakenDough = null;
    }
    void CancelCheeseSelecting()
    {
        StateOfOrder.IsSelectedCheese = null;
    }
}



